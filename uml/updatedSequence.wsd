@startuml SequenceDiagram
activate GameEngine #abc4c3
GameEngine -> Explorer **: initialize()
activate Explorer #abc4c3
Explorer -> ExplorationManager **: new
activate ExplorationManager #abc4c3
ExplorationManager -> IslandLocator **: new
activate IslandLocator #abc4c3
IslandLocator -> CommandHandler **: new
IslandLocator -> EchoSearch **: new
IslandLocator -> TravelToEnd **: new
IslandLocator -> UturnLeft **: new
IslandLocator -> TurnRight **: new
IslandLocator -> TurnLeft **: new
IslandLocator -> FinalForward **: new
ExplorationManager <-- IslandLocator: IslandLocator
deactivate IslandLocator #abc4c3
ExplorationManager -> IslandScanner **: new
activate IslandScanner #abc4c3
IslandScanner -> Decider **: new
IslandScanner -> Slicer **: new
IslandScanner -> UTurn **: new
IslandScanner -> SpecialTurn **: new
IslandScanner -> SpecialTurn2 **: new
ExplorationManager <-- IslandScanner: IslandScanner
deactivate IslandScanner
ExplorationManager -> ResponseHistory **: new
ExplorationManager <-- ResponseHistory: ResponseHistory
Explorer <-- ExplorationManager: ExplorationManager
deactivate ExplorationManager
deactivate Explorer

loop
    GameEngine -> Explorer: takeDecision()
    activate Explorer #abc4c3

    Explorer -> ExplorationManager: getDecision()
    activate ExplorationManager #abc4c3

    ExplorationManager -> IslandLocator: nextAction()
    activate IslandLocator #abc4c3

    alt phase == Phase.SEARCH

    IslandLocator -> CommandHandler: setCommand(echoSearch)
    activate CommandHandler #abc4c3
    IslandLocator -> CommandHandler: nextAction()
    CommandHandler -> EchoSearch: execute()
    activate EchoSearch #abc4c3
    CommandHandler <-- EchoSearch: Optional<JSONObject>
    deactivate EchoSearch
    IslandLocator <-- CommandHandler: Optional<JSONObject>
    deactivate CommandHandler
    
    else phase == Phase.TRAVEL_TO_END

    IslandLocator -> CommandHandler: setCommand(travelToEnd)
    activate CommandHandler #abc4c3
    IslandLocator -> CommandHandler: nextAction()
    CommandHandler -> TravelToEnd: execute()
    activate TravelToEnd #abc4c3
    CommandHandler <-- TravelToEnd: Optional<JSONObject>
    deactivate TravelToEnd
    IslandLocator <-- CommandHandler: Optional<JSONObject>
    deactivate CommandHandler

    else phase == Phase.UTURN

    IslandLocator -> CommandHandler: setCommand(Uturn)
    activate CommandHandler #abc4c3
    IslandLocator -> CommandHandler: nextAction()
    CommandHandler -> UturnLeft: execute()
    activate UturnLeft #abc4c3
    CommandHandler <-- UturnLeft: Optional<JSONObject>
    deactivate UturnLeft
    IslandLocator <-- CommandHandler: Optional<JSONObject>
    deactivate CommandHandler

    else phase == Phase.TURN_R

    IslandLocator -> CommandHandler: setCommand(turnRight)
    activate CommandHandler #abc4c3
    IslandLocator -> CommandHandler: nextAction()
    CommandHandler -> TurnRight: execute()
    activate TurnRight #abc4c3
    CommandHandler <-- TurnRight: Optional<JSONObject>
    deactivate TurnRight
    IslandLocator <-- CommandHandler: Optional<JSONObject>
    deactivate CommandHandler

    else phase == Phase.TURN_L

    IslandLocator -> CommandHandler: setCommand(turnLeft)
    activate CommandHandler #abc4c3
    IslandLocator -> CommandHandler: nextAction()
    CommandHandler -> TurnLeft: execute()
    activate TurnLeft #abc4c3
    CommandHandler <-- TurnLeft: Optional<JSONObject>
    deactivate TurnLeft
    IslandLocator <-- CommandHandler: Optional<JSONObject>
    deactivate CommandHandler

    else phase == Phase.FINAL_FRWD

    IslandLocator -> CommandHandler: setCommand(forwardToCoast)
    activate CommandHandler #abc4c3
    IslandLocator -> CommandHandler: nextAction()
    CommandHandler -> FinalForward: execute()
    activate FinalForward #abc4c3
    CommandHandler <-- FinalForward: Optional<JSONObject>
    deactivate FinalForward
    IslandLocator <-- CommandHandler: Optional<JSONObject>
    deactivate CommandHandler

    end

    ExplorationManager <-- IslandLocator: Optional<JSONObject>
    deactivate IslandLocator


    ExplorationManager -> IslandScanner: nextAction()
    activate IslandScanner #abc4c3

    alt phase == ScannerPhase.DECISION

    IslandScanner -> Decider: performDecision()
    activate Decider #abc4c3
    IslandScanner <-- Decider: JSONObject
    deactivate Decider

    else phase == ScannerPhase.SLICE

    IslandScanner -> Slicer: performSlice()
    activate Slicer #abc4c3
    IslandScanner <-- Slicer: JSONObject
    deactivate Slicer

    else phase == ScannerPhase.TURN

    IslandScanner -> UTurn: performUTurn()
    activate UTurn #abc4c3
    IslandScanner <-- UTurn: JSONObject
    deactivate UTurn

    else phase == ScannerPhase.TURNAROUND

    IslandScanner -> SpecialTurn: specialTurn()
    activate SpecialTurn #abc4c3
    IslandScanner <-- SpecialTurn: JSONObject
    deactivate SpecialTurn

    else phase == ScannerPhase.TURNAROUND2

    IslandScanner -> SpecialTurn2: specialTurn2()
    activate SpecialTurn2 #abc4c3
    IslandScanner <-- SpecialTurn2: JSONObject
    deactivate SpecialTurn2

    end

    ExplorationManager <-- IslandScanner: JSON Response
    deactivate IslandScanner

    Explorer <-- ExplorationManager: JSON Response
    deactivate ExplorationManager
    GameEngine <-- Explorer: JSON Response
    deactivate Explorer

    GameEngine -> Explorer: acknowledgeResults()
    activate Explorer #abc4c3
    Explorer -> ExplorationManager: AddHistory(JSONObject response)
    activate ExplorationManager #abc4c3
    ExplorationManager -> ResponseHistory: AddItem(JSONObject response)
    activate ResponseHistory #abc4c3
    ExplorationManager <-- ResponseHistory
    deactivate ResponseHistory
    deactivate ExplorationManager
    Explorer <-- ExplorationManager
    deactivate Explorer
end

GameEngine -> Explorer: deliverFinalReport()
activate Explorer #abc4c3
Explorer -> ExplorationManager: getClosestInlet()
activate ExplorationManager #abc4c3
ExplorationManager -> SiteTracker **: new
ExplorationManager <-- SiteTracker: SiteTracker
ExplorationManager -> SiteTracker: compilePointsOfInterest(reponseHistory, navHistory)
activate SiteTracker #abc4c3

/'
loop
    SiteTracker -> SiteTracker: addInlet()
    activate SiteTracker #abc4c3
    SiteTracker -> Inlet **:new
    SiteTracker <-- Inlet: Inlet
    deactivate SiteTracker #abc4c3
    SiteTracker -> SiteTracker: addSite()
    activate SiteTracker #abc4c3
    SiteTracker -> Site **:new
    SiteTracker <-- Site: Site
    deactivate SiteTracker #abc4c3
end
'/

ExplorationManager <-- SiteTracker: void
deactivate SiteTracker

ExplorationManager -> SiteTracker: getClosestInlet()
activate SiteTracker #abc4c3
ExplorationManager <-- SiteTracker: String inlet id
deactivate SiteTracker
Explorer <-- ExplorationManager: String inlet id
deactivate ExplorationManager
GameEngine <-- Explorer: String inlet id
deactivate Explorer
@enduml
