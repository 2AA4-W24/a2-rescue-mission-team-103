@startuml SequenceDiagram
activate Runner #abc4c3
Runner -> Explorer: takeDecision()

loop
activate Explorer #abc4c3
Explorer -> ExplorationManager: getDecision()
activate ExplorationManager #abc4c3

ExplorationManager -> IslandLocator: nextAction()
activate IslandLocator #abc4c3

IslandLocator -> CommandHandler: setCommand(echoSearch)
activate CommandHandler #abc4c3
IslandLocator -> CommandHandler: nextAction()
CommandHandler -> EchoSearch: execute()
activate EchoSearch #abc4c3
CommandHandler <- EchoSearch: Optional<JSONObject>
deactivate EchoSearch
IslandLocator <- CommandHandler: Optional<JSONObject>
deactivate CommandHandler

IslandLocator -> CommandHandler: setCommand(travelToEnd)
activate CommandHandler #abc4c3
IslandLocator -> CommandHandler: nextAction()
CommandHandler -> TravelToEnd: execute()
activate TravelToEnd #abc4c3
CommandHandler <- TravelToEnd: Optional<JSONObject>
deactivate TravelToEnd
IslandLocator <- CommandHandler: Optional<JSONObject>
deactivate CommandHandler

IslandLocator -> CommandHandler: setCommand(Uturn)
activate CommandHandler #abc4c3
IslandLocator -> CommandHandler: nextAction()
CommandHandler -> UturnLeft: execute()
activate UturnLeft #abc4c3
CommandHandler <- UturnLeft: Optional<JSONObject>
deactivate UturnLeft
IslandLocator <- CommandHandler: Optional<JSONObject>
deactivate CommandHandler

IslandLocator -> CommandHandler: setCommand(turnRight)
activate CommandHandler #abc4c3
IslandLocator -> CommandHandler: nextAction()
CommandHandler -> TurnRight: execute()
activate TurnRight #abc4c3
CommandHandler <- TurnRight: Optional<JSONObject>
deactivate TurnRight
IslandLocator <- CommandHandler: Optional<JSONObject>
deactivate CommandHandler

IslandLocator -> CommandHandler: setCommand(turnLeft)
activate CommandHandler #abc4c3
IslandLocator -> CommandHandler: nextAction()
CommandHandler -> TurnLeft: execute()
activate TurnLeft #abc4c3
CommandHandler <- TurnLeft: Optional<JSONObject>
deactivate TurnLeft
IslandLocator <- CommandHandler: Optional<JSONObject>
deactivate CommandHandler

IslandLocator -> CommandHandler: setCommand(forwardToCoast)
activate CommandHandler #abc4c3
IslandLocator -> CommandHandler: nextAction()
CommandHandler -> FinalForward: execute()
activate FinalForward #abc4c3
CommandHandler <- FinalForward: Optional<JSONObject>
deactivate FinalForward
IslandLocator <- CommandHandler: Optional<JSONObject>
deactivate CommandHandler

ExplorationManager <- IslandLocator: Optional<JSONObject>
deactivate IslandLocator


ExplorationManager -> IslandScanner: nextAction()
activate IslandScanner #abc4c3
IslandScanner -> Decider: performDecision()
activate Decider #abc4c3
IslandScanner <-- Decider: JSONObject
deactivate Decider
IslandScanner -> Slicer: performSlice()
activate Slicer #abc4c3
IslandScanner <-- Slicer: JSONObject
deactivate Slicer
IslandScanner -> UTurn: performUTurn()
activate UTurn #abc4c3
IslandScanner <-- UTurn: JSONObject
deactivate UTurn
IslandScanner -> SpecialTurn: specialTurn()
activate SpecialTurn #abc4c3
IslandScanner <-- SpecialTurn: JSONObject
deactivate SpecialTurn
IslandScanner -> SpecialTurn2: specialTurn2()
activate SpecialTurn2 #abc4c3
IslandScanner <-- SpecialTurn2: JSONObject
deactivate SpecialTurn2
ExplorationManager <-- IslandScanner: JSON Response
deactivate IslandScanner
Explorer <-- ExplorationManager: JSON Response
deactivate ExplorationManager
Explorer -> ExplorationManager: acknowledgeResults()
activate ExplorationManager #abc4c3
ExplorationManager -> History: addItem()
activate History #abc4c3
History -> NavHistory: addItem()
activate NavHistory #abc4c3
History <-- NavHistory
deactivate NavHistory
History -> ResponseHistory: addItem()
activate ResponseHistory #abc4c3
History <-- ResponseHistory
deactivate ResponseHistory
deactivate History
ExplorationManager <-- History
deactivate ExplorationManager
Explorer <-- ExplorationManager
deactivate Explorer
end
Runner <-- Explorer

Runner -> Explorer: deliverFinalReport()
activate Explorer #abc4c3
Explorer -> SiteTracker: findPointsOfInterest()
activate SiteTracker #abc4c3
loop
SiteTracker -> Inlet: addInlet()
activate Inlet #abc4c3
SiteTracker <-- Inlet: new Inlet()
deactivate Inlet
SiteTracker -> Site: addSite()
activate Site #abc4c3
SiteTracker <-- Site: new Site()
deactivate Site
end
Explorer <-- SiteTracker: List<Inlet>, Site
deactivate SiteTracker

Explorer -> SiteTracker: getClosestInlet()
activate SiteTracker #abc4c3
Explorer <-- SiteTracker: String id of Closest Inlet
deactivate SiteTracker
deactivate Explorer
deactivate Runner
@enduml
