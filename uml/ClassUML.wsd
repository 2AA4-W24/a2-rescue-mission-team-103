@startuml
class Explorer {
  -manager: ExplorationManager
  -siteTracker: SiteTracker
  +initialize(): void
  +takeDecision(): String
  +deliverFinalReport(): String
}

class ExplorationManager {
  -drone: Drone
  -respHistory: ResponseHistory
  -islandLocator: DroneController
  -islandMapper: DroneController
  -start_heading: Direction
  +getDecision(): JSONObject
}

interface History {
  +addItem(T item): void
	+getItems(int offset): List<T>
	+getItems(int start, int end): List<T> 
}

interface DroneController {
  +nextAction(): Optional<JSONObject>
}

interface PointOfInterest {
  +id(): String
  +coord(): Coordinate
}

class ResponseHistory {
  -responseHistory: ArrayList<JSONObject>
}

enum LocatorPhase{
  SEARCH,
	TRAVEL_TO_END,
	UTURN_L,
	TURN_R,
	TURN_L,
	FINAL_FRWD
}

class IslandLocator {
  -next_action: Action
  -phase: Phase
  -history: History<JSONObject>
  -commander: CommandHandler
  +nextAction(): Optional<JSONObject>
}

enum ScannerPhase{
  ECHO,
	DECISION,
	SLICE,
	TURN,
  TURNAROUND,
	TURNAROUND2
}

class IslandScanner {
  -phase: ScannerPhase
  -history: History<JSONObject>
  +nextAction(): Optional<JSONObject>
}

class SiteTracker {
  -calculator: DistanceCalculation
  -site: Optional<PointOfInterest>
  -inlets: ArrayList<PointOfInterest>
}

class Site {
  -id: String
  -coord: Coordinate
}

class Drone {
  -heading: Direction
  -battery: Battery
  -controls: Movements
  -actions: ActionUsage
  -radar: Radar
  +fly(): JSONObject
  +turn(): JSONObject
  +scan(): JSONObject
  +echo(): JSONObject
  +stop(): JSONObject
}

enum Direction {
  NORTH,
  SOUTH,
  EAST,
  WEST
}

class Inlet {
  -id: String
  -coordinate: Coordinate
}

class Movements {
  +fly: JSONObject
  +stop(): JSONObject
}

class NavHistory {
  -navHistory: ArrayList<Coordinate>
}
class Coordinate {
  -x: int
  -y: int
}

class DistanceCalculation {
  +distance(Coordinate c1, Coordinate c2): double
  +returnClosestInlet(): PointOfInterest
}

class Battery {
  -value: int
  +log(int cost): cost
  +canContinue(): boolean
  +getBattery(): int
}

class Radar {
  +scan(): JSONObject
  +echo(): JSONObject
}

class Decider{}
class Slicer {}
class Turnaround {}
class UTurn{}

class EchoSearch{}
class FinalForward{}
class TravelToEnd{}
interface Command{
  +execute(): Optional<JSONObject>
}

class TurnLeft{}
class UturnLeft{}
class TurnRight{}
class CommandHandler{
  -command: Command
  +setCommand(Command command_in): void
  +nextAction(): Optional<JSONObject>
}

Explorer *--> ExplorationManager
ExplorationManager *--> SiteTracker

ExplorationManager *--> DroneController
ExplorationManager *--> History
ExplorationManager *--> Drone

DroneController <|.. IslandScanner
DroneController <|.. IslandLocator

History <|.. ResponseHistory
History <|.. NavHistory

SiteTracker *--> "*" PointOfInterest
SiteTracker *--> DistanceCalculation
PointOfInterest <|.. Site
PointOfInterest <|.. Inlet

IslandLocator *--> LocatorPhase
IslandLocator *--> CommandHandler

IslandLocator o--> Drone
IslandScanner o--> Drone

IslandScanner *--> ScannerPhase
IslandScanner *--> Decider
IslandScanner *--> Slicer
IslandScanner *--> Turnaround
IslandScanner *--> UTurn

Drone *--> Direction
Drone *--> Movements
Drone *--> History
Drone *--> Battery
Drone *--> Radar

NavHistory *--> "*" Coordinate

EchoSearch ..|> Command
FinalForward ..|> Command
TravelToEnd ..|> Command
TurnLeft ..|> Command
UturnLeft ..|> Command
TurnRight ..|> Command
CommandHandler <-- EchoSearch
CommandHandler <-- FinalForward
CommandHandler <-- TravelToEnd
CommandHandler <-- TurnLeft
CommandHandler <-- UturnLeft
CommandHandler <-- TurnRight


@enduml
